// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ad "barbz.dev/marketplace/internal/pkg/domain/ad"
	mock "github.com/stretchr/testify/mock"

	valueobject "barbz.dev/marketplace/pkg/valueobject"
)

// AdRepository is an autogenerated mock type for the AdRepository type
type AdRepository struct {
	mock.Mock
}

type AdRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AdRepository) EXPECT() *AdRepository_Expecter {
	return &AdRepository_Expecter{mock: &_m.Mock}
}

// FindAdById provides a mock function with given fields: id
func (_m *AdRepository) FindAdById(id valueobject.AdId) (ad.Ad, error) {
	ret := _m.Called(id)

	var r0 ad.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(valueobject.AdId) (ad.Ad, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(valueobject.AdId) ad.Ad); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(ad.Ad)
	}

	if rf, ok := ret.Get(1).(func(valueobject.AdId) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdRepository_FindAdById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAdById'
type AdRepository_FindAdById_Call struct {
	*mock.Call
}

// FindAdById is a helper method to define mock.On call
//   - id valueobject.AdId
func (_e *AdRepository_Expecter) FindAdById(id interface{}) *AdRepository_FindAdById_Call {
	return &AdRepository_FindAdById_Call{Call: _e.mock.On("FindAdById", id)}
}

func (_c *AdRepository_FindAdById_Call) Run(run func(id valueobject.AdId)) *AdRepository_FindAdById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(valueobject.AdId))
	})
	return _c
}

func (_c *AdRepository_FindAdById_Call) Return(_a0 ad.Ad, _a1 error) *AdRepository_FindAdById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdRepository_FindAdById_Call) RunAndReturn(run func(valueobject.AdId) (ad.Ad, error)) *AdRepository_FindAdById_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllAds provides a mock function with given fields:
func (_m *AdRepository) FindAllAds() ([]ad.Ad, error) {
	ret := _m.Called()

	var r0 []ad.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]ad.Ad, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []ad.Ad); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ad.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdRepository_FindAllAds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllAds'
type AdRepository_FindAllAds_Call struct {
	*mock.Call
}

// FindAllAds is a helper method to define mock.On call
func (_e *AdRepository_Expecter) FindAllAds() *AdRepository_FindAllAds_Call {
	return &AdRepository_FindAllAds_Call{Call: _e.mock.On("FindAllAds")}
}

func (_c *AdRepository_FindAllAds_Call) Run(run func()) *AdRepository_FindAllAds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AdRepository_FindAllAds_Call) Return(adResponse []ad.Ad, err error) *AdRepository_FindAllAds_Call {
	_c.Call.Return(adResponse, err)
	return _c
}

func (_c *AdRepository_FindAllAds_Call) RunAndReturn(run func() ([]ad.Ad, error)) *AdRepository_FindAllAds_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAd provides a mock function with given fields: _a0
func (_m *AdRepository) SaveAd(_a0 ad.Ad) (ad.Ad, error) {
	ret := _m.Called(_a0)

	var r0 ad.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(ad.Ad) (ad.Ad, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(ad.Ad) ad.Ad); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ad.Ad)
	}

	if rf, ok := ret.Get(1).(func(ad.Ad) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdRepository_SaveAd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAd'
type AdRepository_SaveAd_Call struct {
	*mock.Call
}

// SaveAd is a helper method to define mock.On call
//   - _a0 ad.Ad
func (_e *AdRepository_Expecter) SaveAd(_a0 interface{}) *AdRepository_SaveAd_Call {
	return &AdRepository_SaveAd_Call{Call: _e.mock.On("SaveAd", _a0)}
}

func (_c *AdRepository_SaveAd_Call) Run(run func(_a0 ad.Ad)) *AdRepository_SaveAd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ad.Ad))
	})
	return _c
}

func (_c *AdRepository_SaveAd_Call) Return(_a0 ad.Ad, _a1 error) *AdRepository_SaveAd_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdRepository_SaveAd_Call) RunAndReturn(run func(ad.Ad) (ad.Ad, error)) *AdRepository_SaveAd_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAdRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdRepository creates a new instance of AdRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdRepository(t mockConstructorTestingTNewAdRepository) *AdRepository {
	mock := &AdRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
