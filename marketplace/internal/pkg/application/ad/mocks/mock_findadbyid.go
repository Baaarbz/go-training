// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ad "barbz.dev/marketplace/internal/pkg/application/ad"

	mock "github.com/stretchr/testify/mock"
)

// FindAdById is an autogenerated mock type for the FindAdById type
type FindAdById struct {
	mock.Mock
}

type FindAdById_Expecter struct {
	mock *mock.Mock
}

func (_m *FindAdById) EXPECT() *FindAdById_Expecter {
	return &FindAdById_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, id
func (_m *FindAdById) Execute(ctx context.Context, id string) (ad.GetAdByIdDto, error) {
	ret := _m.Called(ctx, id)

	var r0 ad.GetAdByIdDto
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ad.GetAdByIdDto, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ad.GetAdByIdDto); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(ad.GetAdByIdDto)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAdById_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type FindAdById_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *FindAdById_Expecter) Execute(ctx interface{}, id interface{}) *FindAdById_Execute_Call {
	return &FindAdById_Execute_Call{Call: _e.mock.On("Execute", ctx, id)}
}

func (_c *FindAdById_Execute_Call) Run(run func(ctx context.Context, id string)) *FindAdById_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FindAdById_Execute_Call) Return(response ad.GetAdByIdDto, err error) *FindAdById_Execute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *FindAdById_Execute_Call) RunAndReturn(run func(context.Context, string) (ad.GetAdByIdDto, error)) *FindAdById_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewFindAdById interface {
	mock.TestingT
	Cleanup(func())
}

// NewFindAdById creates a new instance of FindAdById. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFindAdById(t mockConstructorTestingTNewFindAdById) *FindAdById {
	mock := &FindAdById{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
